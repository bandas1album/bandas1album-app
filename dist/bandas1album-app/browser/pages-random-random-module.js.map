{"version":3,"sources":["./src/app/pages/random/random.module.ts","./src/app/pages/random/random-routing.module.ts","./node_modules/url-join/lib/url-join.js","./src/app/services/base/base.service.ts","./src/app/pages/random/random.component.ts","./src/app/pages/random/random.component.html","./src/app/services/album/album.service.ts"],"names":[],"mappings":"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","file":"pages-random-random-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RandomRoutingModule } from './random-routing.module';\nimport { RandomComponent } from './random.component';\n\n\n@NgModule({\n  declarations: [\n    RandomComponent\n  ],\n  imports: [\n    CommonModule,\n    RandomRoutingModule\n  ]\n})\nexport class RandomModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { RandomComponent } from './random.component';\n\nconst routes: Routes = [{ path: '', component: RandomComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RandomRoutingModule { }\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport urljoin from 'url-join';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\n\n/*\n  This should be placed in some miscellaneous folder.\n*/\nexport function constructApiQueryParams(\n  inputParams: any | undefined\n): HttpParams {\n  let params = new HttpParams();\n\n  if (inputParams && Object.keys(inputParams).length > 0) {\n    const inputAttributes = Object.keys(inputParams);\n\n    inputAttributes.map((key) => {\n      params = params.append(key, inputParams[key]);\n    });\n  }\n\n  return params;\n}\n\n/*\n  This should be placed in some folder contatining interface definitions.\n*/\nexport interface HttpOptions {\n  headers?:\n    | HttpHeaders\n    | {\n        [header: string]: string | string[];\n      };\n  observe?: any;\n  params?: any;\n  reportProgress?: boolean;\n  responseType?: 'json';\n  withCredentials?: boolean;\n}\n\n/*\n  This should be placed in some file containing all the application constants.\n*/\nexport class Constants {\n  public static apiRoot = environment.urlApi; // If there is some prefix for all the APIs, then define that in constants.\n}\n\n/**\n * @description\n * Generic Service.\n */\nexport abstract class BaseService<TRead, TCreate, TUpdate> {\n  private readonly endpointUrl: string;\n  merchant = '';\n  unit = '';\n\n  protected constructor(\n    private readonly http: HttpClient,\n    private readonly path: string\n  ) {\n    this.endpointUrl = urljoin(Constants.apiRoot, this.path);\n  }\n\n  protected formatErrors(error: any): Observable<never> {\n    return throwError(error);\n  }\n\n  /**\n   * @description\n   * Get list.\n   * @param options Extra data\n   */\n  get(options: HttpOptions = {}): Observable<TRead[]> {\n    options.params = constructApiQueryParams(options.params);\n    return this.http\n      .get<TRead[]>(this.endpointUrl, options)\n      .pipe(catchError(this.formatErrors));\n  }\n\n  /**\n   * @description\n   * Get by ID.\n   *\n   * @param id      Required ID\n   * @param options Extra data\n   */\n  getById(id: string, options: HttpOptions = {}): Observable<TRead> {\n    options.params = constructApiQueryParams(options.params);\n    const url = urljoin(this.endpointUrl, id);\n    return this.http\n      .get<TRead>(url, options)\n      .pipe(catchError(this.formatErrors));\n  }\n\n  /**\n   * @description\n   * Generic create.\n   * @param creationBody  Required information\n   * @param options       Extra data\n   */\n  create(creationBody: TCreate, options: HttpOptions = {}): Observable<TRead> {\n    options.params = constructApiQueryParams(options.params);\n    return this.http\n      .post<TRead>(this.endpointUrl, creationBody, options)\n      .pipe(catchError(this.formatErrors));\n  }\n\n  /**\n   * @description\n   * Update by ID.\n   *\n   * @param id          Required ID\n   * @param updateBody  Required information\n   * @param options     Extra data\n   */\n  update(\n    id: string,\n    updateBody: TUpdate,\n    options: HttpOptions = {}\n  ): Observable<any> {\n    options.params = constructApiQueryParams(options.params);\n    const url = urljoin(this.endpointUrl, id);\n    return this.http\n      .put(url, updateBody, options)\n      .pipe(catchError(this.formatErrors));\n  }\n\n  /**\n   * @description\n   * Delete by ID.\n   *\n   * @param id      Required ID\n   * @param options Extra data\n   */\n  delete(id: string, options: HttpOptions = {}): Observable<any> {\n    options.params = constructApiQueryParams(options.params);\n    const url = urljoin(this.endpointUrl, id);\n    return this.http.delete(url, options).pipe(catchError(this.formatErrors));\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AlbumService } from 'src/app/services/album/album.service';\n\n@Component({\n  selector: 'app-random',\n  templateUrl: './random.component.html',\n  styleUrls: ['./random.component.scss'],\n})\nexport class RandomComponent implements OnInit {\n  params: any = {\n    page: 1,\n    per_page: 1,\n    orderby: 'rand',\n  };\n\n  constructor(private albumService: AlbumService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.getAlbums();\n  }\n\n  getAlbums() {\n    this.albumService.get({ params: this.params }).subscribe(\n      (res: any) => {\n        const data = res[0];\n        this.router.navigateByUrl(`/album/${data.slug}`);\n      },\n      (err: any) => {\n        // console.log(err);\n      }\n    );\n  }\n}\n","<main class=\"main\" role=\"main\">\n  <section>\n    <div class=\"wrapper\">\n      <img\n        class=\"spinner\"\n        src=\"/assets/img/logo.png\"\n        loading=\"lazy\"\n        alt=\"Bandas de 1 Álbum\"\n      />\n      <h1>Modo randômico ativado!</h1>\n      <h2>Estamos escolhendo um álbum para você...</h2>\n    </div>\n  </section>\n</main>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { AlbumItem } from './models';\nimport { BaseService } from '../base/base.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlbumService extends BaseService<AlbumItem, null, null> {\n  constructor(private readonly httpClient: HttpClient) {\n    super(httpClient, `album`);\n  }\n}\n"],"sourceRoot":"webpack:///"}